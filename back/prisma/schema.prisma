generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model address {
  id           String   @id
  user_id      String
  address_name String?
  name         String
  phone_number String
  postal_code  String
  address1     String
  address2     String
  is_default   Boolean  @unique @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime
  user         user     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "address_user_id_fkey")
}

model analysis {
  id              String            @id
  image_url       String
  created_at      DateTime          @default(now())
  updated_at      DateTime
  analysis_detail analysis_detail[]
}

model analysis_detail {
  id            String   @id
  analysis_id   String
  coordinate    String
  country       String?
  currency_type String?
  amount        Int?
  created_at    DateTime @default(now())
  updated_at    DateTime
  analysis      analysis @relation(fields: [analysis_id], references: [id])

  @@index([analysis_id], map: "analysis_detail_analysis_id_fkey")
}

model coin {
  id            String       @id
  country_id    String
  currency_type String
  unit_amount   Int
  is_used       Boolean      @default(true)
  stockAmount   Int          @default(0)
  created_at    DateTime     @default(now())
  updated_at    DateTime
  country       country      @relation(fields: [country_id], references: [id])
  order_coin    order_coin[]

  @@index([country_id], map: "coin_country_id_fkey")
}

model country {
  id                   String                 @id
  country_name         String
  country_name_eng     String
  country_code         String
  exchange_rate_code   String?
  stock_amount         Int                    @default(0)
  is_handled           Boolean                @default(true)
  currency_unit_name   String?
  currency_unit_abbr   String?
  created_at           DateTime               @default(now())
  updated_at           DateTime
  coin                 coin[]
  country_non_handling country_non_handling[]
}

model country_non_handling {
  id                  String                                   @id
  country_id          String
  non_handling_reason country_non_handling_non_handling_reason @default(shortage_deals)
  start_date          Int
  end_date            Int                                      @default(99991231)
  stock_amount        Int                                      @default(0)
  created_at          DateTime                                 @default(now())
  updated_at          DateTime
  country             country                                  @relation(fields: [country_id], references: [id])

  @@index([country_id], map: "country_non_handling_country_id_fkey")
}

model deal {
  id          String           @id
  user_id     String
  deal_status deal_deal_status
  image_url   String?
  created_at  DateTime         @default(now())
  updated_at  DateTime
  isActivate  Int              @db.TinyInt
  user        user             @relation(fields: [user_id], references: [id])
  deal_detail deal_detail[]
  order_coin  order_coin[]

  @@index([user_id], map: "deal_user_id_fkey")
}

model deal_detail {
  id              String                 @id
  deal_id         String
  res_name        String
  res_address1    String
  res_address2    String
  res_status      deal_detail_res_status
  company         String?
  delivery_number String?
  created_at      DateTime               @default(now())
  updated_at      DateTime
  deal            deal                   @relation(fields: [deal_id], references: [id])

  @@index([deal_id], map: "deal_detail_deal_id_fkey")
}

model order_coin {
  id           String @id
  deal_id      String
  coin_id      String
  deal_amount  Int
  stock_Amount Int    @default(0) @map("stock Amount")
  coin         coin   @relation(fields: [coin_id], references: [id])
  deal         deal   @relation(fields: [deal_id], references: [id])

  @@index([coin_id], map: "order_coin_coin_id_fkey")
  @@index([deal_id], map: "order_coin_deal_id_fkey")
}

model sns_login {
  id          String  @id
  user_id     String
  sns_type    String
  sns_name    String
  sns_profile String?
  sns_id      String
  user        user    @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "sns_login_user_id_fkey")
}

model user {
  id                  String      @id
  email               String      @unique
  is_email_authorized Boolean     @default(false)
  password            String
  role                user_role   @default(user)
  userName            String
  phone_number        String
  created_at          DateTime    @default(now())
  updated_at          DateTime
  address             address[]
  deal                deal[]
  sns_login           sns_login[]
  user_token          user_token?
  wallet              wallet[]
}

model user_token {
  id            String   @id
  user_id       String   @unique
  refresh_token String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime
  user          user     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "user_token_user_id_fkey")
}

model wallet {
  id                  String @id
  user_id             String
  krw_amount          Int
  statement           String
  expiration_datetime Int    @default(99991231)
  user                user   @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "wallet_user_id_fkey")
}

enum country_non_handling_non_handling_reason {
  travel_ban_country
  shortage_deals
}

enum deal_deal_status {
  buy
  sell
}

enum user_role {
  admin
  user
  withdrawal
}

enum deal_detail_res_status {
  waiting
  shipping
  completion
}
